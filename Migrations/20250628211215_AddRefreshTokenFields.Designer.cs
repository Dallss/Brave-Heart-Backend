// <auto-generated />
using System;
using BraveHeartBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BraveHeartBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250628211215_AddRefreshTokenFields")]
    partial class AddRefreshTokenFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BraveHeartBackend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BraveHeartBackend.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("BraveHeartBackend.Models.CheckoutDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CheckoutDetails");
                });

            modelBuilder.Entity("BraveHeartBackend.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "https://example.com/iphone15.jpg",
                            Name = "iPhone 15",
                            Price = 999.00m,
                            ProductTypeId = 1,
                            Stock = 50
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "https://example.com/galaxy-s24.jpg",
                            Name = "Samsung Galaxy S24",
                            Price = 899.00m,
                            ProductTypeId = 1,
                            Stock = 30
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "https://example.com/macbook-pro.jpg",
                            Name = "MacBook Pro",
                            Price = 1999.00m,
                            ProductTypeId = 1,
                            Stock = 20
                        },
                        new
                        {
                            Id = 4,
                            ImageUrl = "https://example.com/abc-extinguisher.jpg",
                            Name = "ABC Fire Extinguisher",
                            Price = 89.99m,
                            ProductTypeId = 2,
                            Stock = 100
                        },
                        new
                        {
                            Id = 5,
                            ImageUrl = "https://example.com/co2-extinguisher.jpg",
                            Name = "CO2 Fire Extinguisher",
                            Price = 149.99m,
                            ProductTypeId = 2,
                            Stock = 75
                        },
                        new
                        {
                            Id = 6,
                            ImageUrl = "https://example.com/fire-blanket.jpg",
                            Name = "Fire Blanket",
                            Price = 29.99m,
                            ProductTypeId = 2,
                            Stock = 200
                        },
                        new
                        {
                            Id = 7,
                            ImageUrl = "https://example.com/firefighter-jacket.jpg",
                            Name = "Firefighter Jacket",
                            Price = 299.99m,
                            ProductTypeId = 3,
                            Stock = 25
                        },
                        new
                        {
                            Id = 8,
                            ImageUrl = "https://example.com/safety-helmet.jpg",
                            Name = "Safety Helmet",
                            Price = 89.99m,
                            ProductTypeId = 3,
                            Stock = 60
                        });
                });

            modelBuilder.Entity("BraveHeartBackend.Models.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("ProductAttributes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataType = "string",
                            IsRequired = true,
                            Name = "Color",
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            DataType = "string",
                            IsRequired = true,
                            Name = "Storage",
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            DataType = "string",
                            IsRequired = true,
                            Name = "Brand",
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            DataType = "string",
                            IsRequired = true,
                            Name = "ExtinguisherClass",
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            DataType = "string",
                            IsRequired = true,
                            Name = "Capacity",
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            DataType = "string",
                            IsRequired = false,
                            Name = "Material",
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 7,
                            DataType = "string",
                            IsRequired = true,
                            Name = "Size",
                            ProductTypeId = 3
                        },
                        new
                        {
                            Id = 8,
                            DataType = "string",
                            IsRequired = true,
                            Name = "Material",
                            ProductTypeId = 3
                        },
                        new
                        {
                            Id = 9,
                            DataType = "string",
                            IsRequired = true,
                            Name = "Color",
                            ProductTypeId = 3
                        });
                });

            modelBuilder.Entity("BraveHeartBackend.Models.ProductAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductAttributeId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttributeValues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductAttributeId = 1,
                            ProductId = 1,
                            Value = "Black"
                        },
                        new
                        {
                            Id = 2,
                            ProductAttributeId = 1,
                            ProductId = 1,
                            Value = "White"
                        },
                        new
                        {
                            Id = 3,
                            ProductAttributeId = 2,
                            ProductId = 1,
                            Value = "128GB"
                        },
                        new
                        {
                            Id = 4,
                            ProductAttributeId = 2,
                            ProductId = 1,
                            Value = "256GB"
                        },
                        new
                        {
                            Id = 5,
                            ProductAttributeId = 3,
                            ProductId = 1,
                            Value = "Apple"
                        },
                        new
                        {
                            Id = 6,
                            ProductAttributeId = 1,
                            ProductId = 2,
                            Value = "Black"
                        },
                        new
                        {
                            Id = 7,
                            ProductAttributeId = 1,
                            ProductId = 2,
                            Value = "Blue"
                        },
                        new
                        {
                            Id = 8,
                            ProductAttributeId = 2,
                            ProductId = 2,
                            Value = "128GB"
                        },
                        new
                        {
                            Id = 9,
                            ProductAttributeId = 2,
                            ProductId = 2,
                            Value = "512GB"
                        },
                        new
                        {
                            Id = 10,
                            ProductAttributeId = 3,
                            ProductId = 2,
                            Value = "Samsung"
                        },
                        new
                        {
                            Id = 11,
                            ProductAttributeId = 1,
                            ProductId = 3,
                            Value = "Space Gray"
                        },
                        new
                        {
                            Id = 12,
                            ProductAttributeId = 1,
                            ProductId = 3,
                            Value = "Silver"
                        },
                        new
                        {
                            Id = 13,
                            ProductAttributeId = 2,
                            ProductId = 3,
                            Value = "512GB"
                        },
                        new
                        {
                            Id = 14,
                            ProductAttributeId = 2,
                            ProductId = 3,
                            Value = "1TB"
                        },
                        new
                        {
                            Id = 15,
                            ProductAttributeId = 3,
                            ProductId = 3,
                            Value = "Apple"
                        },
                        new
                        {
                            Id = 16,
                            ProductAttributeId = 4,
                            ProductId = 4,
                            Value = "ABC"
                        },
                        new
                        {
                            Id = 17,
                            ProductAttributeId = 5,
                            ProductId = 4,
                            Value = "5 lbs"
                        },
                        new
                        {
                            Id = 18,
                            ProductAttributeId = 5,
                            ProductId = 4,
                            Value = "10 lbs"
                        },
                        new
                        {
                            Id = 19,
                            ProductAttributeId = 6,
                            ProductId = 4,
                            Value = "Steel"
                        },
                        new
                        {
                            Id = 20,
                            ProductAttributeId = 4,
                            ProductId = 5,
                            Value = "CO2"
                        },
                        new
                        {
                            Id = 21,
                            ProductAttributeId = 5,
                            ProductId = 5,
                            Value = "10 lbs"
                        },
                        new
                        {
                            Id = 22,
                            ProductAttributeId = 6,
                            ProductId = 5,
                            Value = "Aluminum"
                        },
                        new
                        {
                            Id = 23,
                            ProductAttributeId = 4,
                            ProductId = 6,
                            Value = "N/A"
                        },
                        new
                        {
                            Id = 24,
                            ProductAttributeId = 5,
                            ProductId = 6,
                            Value = "4ft x 6ft"
                        },
                        new
                        {
                            Id = 25,
                            ProductAttributeId = 6,
                            ProductId = 6,
                            Value = "Fiberglass"
                        },
                        new
                        {
                            Id = 26,
                            ProductAttributeId = 7,
                            ProductId = 7,
                            Value = "Large"
                        },
                        new
                        {
                            Id = 27,
                            ProductAttributeId = 7,
                            ProductId = 7,
                            Value = "XL"
                        },
                        new
                        {
                            Id = 28,
                            ProductAttributeId = 8,
                            ProductId = 7,
                            Value = "Nomex"
                        },
                        new
                        {
                            Id = 29,
                            ProductAttributeId = 9,
                            ProductId = 7,
                            Value = "Yellow"
                        },
                        new
                        {
                            Id = 30,
                            ProductAttributeId = 9,
                            ProductId = 7,
                            Value = "Orange"
                        },
                        new
                        {
                            Id = 31,
                            ProductAttributeId = 7,
                            ProductId = 8,
                            Value = "Medium"
                        },
                        new
                        {
                            Id = 32,
                            ProductAttributeId = 7,
                            ProductId = 8,
                            Value = "Large"
                        },
                        new
                        {
                            Id = 33,
                            ProductAttributeId = 8,
                            ProductId = 8,
                            Value = "ABS Plastic"
                        },
                        new
                        {
                            Id = 34,
                            ProductAttributeId = 9,
                            ProductId = 8,
                            Value = "White"
                        },
                        new
                        {
                            Id = 35,
                            ProductAttributeId = 9,
                            ProductId = 8,
                            Value = "Yellow"
                        });
                });

            modelBuilder.Entity("BraveHeartBackend.Models.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fire Safety Equipment"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Clothing"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BraveHeartBackend.Models.CartItem", b =>
                {
                    b.HasOne("BraveHeartBackend.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BraveHeartBackend.Models.ApplicationUser", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BraveHeartBackend.Models.CheckoutDetails", b =>
                {
                    b.HasOne("BraveHeartBackend.Models.ApplicationUser", "User")
                        .WithMany("CheckoutDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BraveHeartBackend.Models.Product", b =>
                {
                    b.HasOne("BraveHeartBackend.Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("BraveHeartBackend.Models.ProductAttribute", b =>
                {
                    b.HasOne("BraveHeartBackend.Models.ProductType", "ProductType")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("BraveHeartBackend.Models.ProductAttributeValue", b =>
                {
                    b.HasOne("BraveHeartBackend.Models.ProductAttribute", "ProductAttribute")
                        .WithMany("Values")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BraveHeartBackend.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BraveHeartBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BraveHeartBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BraveHeartBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BraveHeartBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BraveHeartBackend.Models.ApplicationUser", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("CheckoutDetails");
                });

            modelBuilder.Entity("BraveHeartBackend.Models.ProductAttribute", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("BraveHeartBackend.Models.ProductType", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
